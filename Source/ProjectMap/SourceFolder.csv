"Root Folder","Sub-Folder Level 2","Sub-Folder Level 3","Sub-Folder Level 4","Sub-Folder Level 5","Sub-Folder Level 6","Sub-Folder Level 7","Sub-Folder Level 8","Sub-Folder Level 9","Sub-Folder Level 10","Type","FEATURES","Summary","Notes","Functions","ORDER_OF_OPERATIONS","DEPENDENCIES","Data Flow / State Management","LINES OF CODE","Input Sources / Output Destinations","Side Effects","CYCLOMATIC COMPLEXITY","EXECUTION CONTEXT","ERROR HANDLING COVERAGE"
"Source","","","","","","","","","","folder","","","","","","","","63456","","","","N/A","N/A"
"Source","ProjectMap","","","","","","","","","folder","","","","","","","","","","","","N/A","N/A"
"Source","ProjectMap","FolderStructure.md","","","","","","","",".md file","FolderStructure","","","","","","","55","","","","N/A","N/A"
"Source","ProjectMap","SourceFolder.csv","","","","","","","",".csv file","SourceFolder ΓÇö cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js; js/adaptiveDoorsizing.js; js/archedDoorRenderer.js; js/calculations.js; js/calculationsManΓÇª","","","","","","","50655","","","","N/A","N/A"
"Source","Tools","","","","","","","","","folder","","","","","","","","","","","","N/A","N/A"
"Source","Tools","CSVTools","","","","","","","","folder","","","","","","","","","","","","N/A","N/A"
"Source","Tools","CSVTools","CSVEditor.html","","","","","","",".html file","CSVEditor ΓÇö [DOM]","","","","","https://cdn.tailwindcss.com; https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.5/babel.min.js; https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js; https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js","HTML{ids=[root]; scripts=[https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js, https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js, https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.5/babel.min.js, https://cdn.tailwindcss.com]}","681","Inputs{USER:input[type=text]} | Outputs{UI:<svg>}","SideEffects{DOM:event-handlers; DOM:script}","","N/A","N/A"
"Source","Tools","CSVTools","Folder-Tree-to-Spreadsheet-Converter.html","","","","","","",".html file","Folder Tree To Spreadsheet Converter ΓÇö [DOM]","","","","","https://cdn.tailwindcss.com; https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.5/babel.min.js; https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js; https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js","HTML{ids=[root]; scripts=[https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js, https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js, https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.5/babel.min.js, https://cdn.tailwindcss.com]}","238","Outputs{UI:<svg>}","SideEffects{DOM:event-handlers; DOM:script}","","N/A","N/A"
"Source","Tools","CSVTools","FolderTreeCSVToGoogleSheetsConverter.html","","","","","","",".html file","FolderTreeCSVToGoogleSheetsConverter ΓÇö [DOM]","","","","","https://cdn.tailwindcss.com; https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.5/babel.min.js; https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js; https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js","HTML{ids=[root]; scripts=[https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js, https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js, https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.5/babel.min.js, https://cdn.tailwindcss.com]}","282","Inputs{USER:input[type=text]} | Outputs{UI:<svg>}","SideEffects{DOM:event-handlers; DOM:script}","","N/A","N/A"
"Source","Tools","CSVTools","generate-llm-dataset.mjs","","","","","","",".mjs file","Generate Llm Dataset ΓÇö Defines main | Notes: LLM Training Dataset Generator [File IO, Stateful]","","","main","fileURLToPath -> path.dirname -> path.resolve -> console.log -> path.resolve -> loadCsvTable -> console.log -> headers.findIndex -> toUpperCase -> h.trim -> new Error -> fileType.toLowerCase -> fileType.startsWith -> row.trim -> pathSegments.push -> row.trim -> path.join -> path.resolve -> fs.readFile -> headers.forEach -> toLowerCase -> replace -> header.trim -> dataset.push -> console.warn -> path.resolve -> fs.writeFile -> JSON.stringify -> console.log -> console.log -> path.relative -> console.error -> console.error -> process.exit -> main","./lib/table-helpers.mjs; node:fs; node:path; node:url","Globals{write=[__filename, __dirname, workspaceRoot]; read=[import, meta, Error, fileError, error]} | SharedState{import:node:fs, import:node:path, import:node:url, import:./lib/table-helpers.mjs}","115","Inputs{FILE:fs.readFile()} | Outputs{FILE:fs.writeFile(); LOG:console.error; LOG:console.log; LOG:console.warn}","SideEffects{FILE:read; FILE:write; LOG:console; STATE:module}","12 (Moderate)","mixed (async+await+callbacks) [33% async]","basic (2×try/catch) [MEDIUM]"
"Source","Tools","CSVTools","lib","","","","","","","folder","","","","","","","","","","","","N/A","N/A"
"Source","Tools","CSVTools","lib","csharp-analysis.mjs","","","","","",".mjs file","Csharp Analysis ΓÇö Defines analyzeCSharpIO, collectCSharpIoCategories, collectEventSubscriptionsΓÇª | Notes: C# ANALYSIS - Static code analysis utilities for C# source files [Stateful]","","","analyzeCSharpIO; collectCSharpIoCategories; collectEventSubscriptions; collectRegexMatchesList; collectSimpleCalls; escapeRegex; extractCSharpCallOrder; extractCSharpDependencies; extractCSharpMethodNames; findClosingParen; findSimpleClosingParen; sanitizeCSharpCode; skipWhitespace; skipWhitespaceBackward; summarizeCSharpDataFlow","new Set -> sanitizeCSharpCode -> new Set -> new Set -> classRegex.exec -> classNames.add -> sanitized.split -> methodPattern.exec -> SKIP_CALL_NAMES.has -> line.substring -> findSimpleClosingParen -> trim -> afterMatch.substring -> afterParen.startsWith -> afterParen.startsWith -> methodNames.add -> constructorPattern.exec -> classNames.has -> methodNames.add -> sort -> Array.from -> a.localeCompare -> sanitizeCSharpCode -> callRegex.exec -> pop -> fullName.split -> SKIP_CALL_NAMES.has -> findClosingParen -> skipWhitespace -> sanitized.slice -> toLowerCase -> sanitized.slice -> nextFive.startsWith -> skipWhitespaceBackward -> calls.push -> sanitizeCSharpCode -> new Set -> usingRegex.exec -> dependencies.add -> dependencies.add -> sanitizeCSharpCode -> new Set -> STATIC_FIELD_REGEX.exec -> globals.add -> collectEventSubscriptions -> collectCSharpIoCategories -> extractCSharpDependencies -> new Set -> dependencies.forEach -> sharedState.add -> segments.push -> join -> sort -> Array.from -> segments.push -> join -> sort -> Array.from -> segments.push -> join -> sort -> Array.from -> parts.push -> join -> sort -> Array.from -> parts.push -> join -> sort -> Array.from -> segments.push -> parts.join -> parts.push -> join -> sort -> Array.from -> parts.push -> join -> sort -> Array.from -> segments.push -> parts.join -> segments.push -> join -> sort -> Array.from -> segments.push -> join -> sort -> Array.from -> segments.push -> join -> sort -> Array.from -> segments.join -> sanitizeCSharpCode -> new Set -> new Set -> collectCSharpIoCategories -> categories.fileRead.forEach -> inputs.add -> categories.fileWrite.forEach -> outputs.add -> categories.consoleRead.forEach -> inputs.add -> categories.logs.forEach -> outputs.add -> categories.networkRead.forEach -> inputs.add -> categories.networkWrite.forEach -> outputs.add -> categories.configRead.forEach -> inputs.add -> collectEventSubscriptions -> events.forEach -> inputs.add -> new Set -> new Set -> new Set -> new Set -> new Set -> new Set -> new Set -> collectSimpleCalls -> collectSimpleCalls -> collectSimpleCalls -> collectSimpleCalls -> collectSimpleCalls -> collectSimpleCalls -> collectSimpleCalls -> collectRegexMatchesList -> collectRegexMatchesList -> test -> test -> test -> test -> categories.networkRead.add -> test -> categories.networkWrite.add -> test -> categories.networkWrite.add -> test -> categories.networkWrite.add -> test -> categories.networkWrite.add -> test -> test -> categories.networkRead.add -> new Set -> EVENT_SUBSCRIPTION_REGEX.exec -> full.split -> events.add -> patterns.forEach -> new RegExp -> escapeRegex -> regex.test -> targetSet.add -> descriptors.forEach -> new RegExp -> tester.test -> targetSet.add -> value.replace -> test -> test","","Globals{write=[SKIP_CALL_NAMES, FILE_READ_CALLS, FILE_WRITE_CALLS, CONSOLE_INPUT_CALLS, LOG_CALLS, WEBCLIENT_READ_CALLS, WEBCLIENT_WRITE_CALLS, HTTP_WEB_REQUEST_CALLS, LOGGER_REGEXES, CONFIG_REGEXES, STATIC_FIELD_REGEX, EVENT_SUBSCRIPTION_REGEX]; read=[findSimpleClosingParen, findClosingParen, skipWhitespace, skipWhitespaceBackward, collectEventSubscriptions, collectCSharpIoCategories, collectSimpleCalls, collectRegexMatchesList, escapeRegex]}","892","Outputs{COMPONENT:export; COMPONENT:return}","SideEffects{STATE:module}","114 (Very High)","callbacks","NONE [HIGH RISK]"
"Source","Tools","CSVTools","lib","project-map-sync-core.mjs","","","","","",".mjs file","Project Map Sync Core ΓÇö Defines buildCsvText, buildPathKey, buildUpdatedRowsΓÇª | Notes: PROJECT MAP SYNCHRONIZATION CORE Synchronizes CSV project maps with actual file system structure [File IO, Stateful]","","","buildCsvText; buildPathKey; buildUpdatedRows; classifyFileType; compareFileSystemToCsv; copyRow; escapeForCsv; extractPathSegmentsFromRow; findFeaturesColumnIndex; findTypeColumnIndex; parseCsv; readCsvFile; scanProjectTree; typesEqual; walk; writeCsvFile","new Set -> fs.readFile -> parseCsv -> buildCsvText -> fs.writeFile -> Array.isArray -> path.basename -> new Set -> entries.push -> initialSegments.join -> fs.readdir -> onDirectoryError -> dirEntries.sort -> a.isDirectory -> b.isDirectory -> a.isDirectory -> a.name.localeCompare -> dirent.name.startsWith -> dirent.isDirectory -> excluded.has -> nextSegments.join -> dirent.isDirectory -> entries.push -> walk -> path.join -> entries.push -> classifyFileType -> walk -> findTypeColumnIndex -> fileSystemEntries.reduce -> Math.max -> newPathHeaders.push -> headers.splice -> headers.includes -> headers.splice -> new Map -> csvRows.forEach -> extractPathSegmentsFromRow -> pathSegments.join -> csvEntries.has -> duplicateCsvEntries.push -> csvEntries.set -> trim -> new Map -> fileSystemEntries.forEach -> fsEntries.set -> fsEntries.forEach -> csvEntries.get -> newEntries.push -> matchedEntries.push -> typesEqual -> changedEntries.push -> csvEntries.forEach -> fsEntries.has -> deletedEntries.push -> matchedEntries.forEach -> copyRow -> outputRows.push -> newEntries.forEach -> fill -> new Array -> findFeaturesColumnIndex -> outputRows.push -> outputRows.sort -> buildPathKey -> buildPathKey -> aKey.localeCompare -> path.extname -> ext.toLowerCase -> toLowerCase -> trim -> toLowerCase -> trim -> fill -> new Array -> trim -> segments.push -> toLowerCase -> segments.join -> trim -> segments.push -> headers.findIndex -> toLowerCase -> header.trim -> new Error -> headers.findIndex -> toLowerCase -> header.trim -> currentRow.push -> currentRow.push -> rows.push -> currentRow.push -> rows.push -> currentRow.push -> rows.push -> new Error -> rows.0.map -> trim -> header.replace -> filter -> rows.slice -> row.some -> trim -> join -> allRows.map -> join -> row.map -> String -> stringValue.replace","node:fs/promises; node:path","Globals{write=[DEFAULT_EXCLUDED_FOLDERS]; read=[parseCsv, buildCsvText, error, classifyFileType, findTypeColumnIndex, extractPathSegmentsFromRow, typesEqual, copyRow, findFeaturesColumnIndex, buildPathKey, Error, escapeForCsv, undefined]} | SharedState{import:node:fs/promises, import:node:path}","633","Inputs{FILE:fs.readFile(); FILE:fs.readdir()} | Outputs{COMPONENT:export; COMPONENT:return; FILE:fs.writeFile()}","SideEffects{FILE:read; FILE:write; STATE:module}","48 (Complex)","mixed (async+await+callbacks) [13% async]","minimal (1×try/catch) [HIGH]"
"Source","Tools","CSVTools","lib","python-analysis.mjs","","","","","",".mjs file","Python Analysis ΓÇö Defines analyzePython, analyzePythonIO, checkPythonExecutableΓÇª | Notes: PYTHON CODE ANALYSIS MODULE Analyzes Python source code by spawning a Python interpreter and running an embedded AST analyzer [File IO, Stateful]","","","analyzePython; analyzePythonIO; checkPythonExecutable; extractPythonCallOrder; extractPythonDependencies; extractPythonFunctionNames; getPythonExecutable; resolvePythonExecutable; runPythonAnalyzer; summarizePythonDataFlow; summarizePythonSideEffects","new Map -> analyzePython -> analyzePython -> analyzePython -> analyzePython -> analyzePython -> analyzePython -> path.isAbsolute -> path.join -> process.cwd -> analysisCache.has -> analysisCache.get -> fs.readFile -> getPythonExecutable -> runPythonAnalyzer -> analysisCache.set -> resolvePythonExecutable -> checkPythonExecutable -> new Error -> new Promise -> spawn -> proc.once -> proc.once -> resolve -> reject -> new Error -> new Promise -> spawn -> proc.stdout.on -> proc.stderr.on -> proc.once -> reject -> proc.once -> reject -> new Error -> stderr.trim -> JSON.parse -> reject -> new Error -> resolve -> reject -> new Error -> proc.stdin.write -> proc.stdin.end","node:child_process; node:fs/promises; node:path","Globals{write=[analysisCache, pythonExecutablePromise, PYTHON_ANALYZER_SOURCE]; read=[analyzePython, getPythonExecutable, runPythonAnalyzer, resolvePythonExecutable, checkPythonExecutable, Error, PYTHON_ANALYZER_SOURCE, error]} | SharedState{import:node:child_process, import:node:fs/promises, import:node:path}","553","Inputs{FILE:fs.readFile()} | Outputs{COMPONENT:export; COMPONENT:return}","SideEffects{FILE:read}","12 (Moderate)","mixed (async+await+promises+callbacks) [56% async]","basic (2×try/catch, 1×callbacks) [MEDIUM]"
"Source","Tools","CSVTools","lib","save-result.mjs","","","","","",".mjs file","Save Result ΓÇö Defines saveResultSlot | Notes: SAVE RESULT SLOT Saves query results to a timestamped slot column in the project CSV","","","saveResultSlot","loadCsvTable -> ensureColumns -> toISOString -> new Date -> rows.forEach -> trim -> writeCsvTable","./table-helpers.mjs","SharedState{import:./table-helpers.mjs}","61","Outputs{COMPONENT:export; COMPONENT:return}","SideEffects{NON_DETERMINISTIC}","3 (Simple)","mixed (async+await+callbacks) [50% async]","NONE [HIGH RISK]"
"Source","Tools","CSVTools","lib","table-helpers.mjs","","","","","",".mjs file","Table Helpers ΓÇö Defines buildRowPath, createValueAccessor, ensureColumnΓÇª | Notes: TABLE HELPERS - CSV table manipulation utilities for project map management [Stateful]","","","buildRowPath; createValueAccessor; ensureColumn; ensureColumns; loadCsvTable; normalizeRows; resolveCsvPath; writeCsvTable","process.cwd -> path.isAbsolute -> path.join -> path.join -> resolveCsvPath -> readCsvFile -> normalizeRows -> normalizeRows -> writeCsvFile -> headers.findIndex -> header.trim -> headers.push -> rows.forEach -> row.push -> row.push -> headerNames.forEach -> ensureColumn -> trim -> segments.push -> segments.join -> new Map -> headers.map -> toUpperCase -> header.trim -> toUpperCase -> headerName.trim -> map.get -> toString -> rows.forEach -> Array.isArray -> row.push","./project-map-sync-core.mjs; node:path","Globals{write=[workspaceRoot]; read=[normalizeRows, undefined]} | SharedState{import:node:path, import:./project-map-sync-core.mjs}","236","Outputs{COMPONENT:export; COMPONENT:return}","PURE","11 (Moderate)","mixed (async+await+callbacks) [14% async]","NONE [HIGH RISK]"
"Source","Tools","CSVTools","package.json","","","","","","",".json file","Package","","","","","node generate-llm-dataset.mjs; node preview-changes.mjs; node Querier.mjs; node Results.mjs; node SavedResult1.mjs; node SavedResult2.mjs; node SavedResult3.mjs; node sync-filesystem-to-csv.mjs; node update-csv-workflow-with-coverage.mjs; node update-csv-workflow.mjs; node update-functions.mjs; node updateCyclomaticComplexity.mjs; node updateDataFlow.mjs; node updateDependencies.mjs; node updateErrorHandlingCoverage.mjs; node updateExecutionContext.mjs; node updateFeatures.mjs; node updateInputSourcesOutputDestinations.mjs; node updateLinesOfCodeCounter.mjs; node updateOrderOfOperations.mjs; node updateSideEffects.mjs; node updateTestCoverage.mjs","JSON{root=object; keys=[name, version, description, type, scripts, keywords]; refs=[node update-csv-workflow.mjs, node sync-filesystem-to-csv.mjs, node preview-changes.mjs, node update-csv-workflow-with-coverage.mjs, node update-functions.mjs, node updateOrderOfOperations.mjs, node updateDependencies.mjs, node updateDataFlow.mjs, node updateLinesOfCodeCounter.mjs, node updateInputSourcesOutputDestinations.mjs, node updateSideEffects.mjs, node updateCyclomaticComplexity.mjs, node updateExecutionContext.mjs, node updateErrorHandlingCoverage.mjs, node updateFeatures.mjs, node updateTestCoverage.mjs, node Querier.mjs, node Results.mjs, node SavedResult1.mjs, node SavedResult2.mjs, node SavedResult3.mjs, node generate-llm-dataset.mjs]}","43","Inputs{CONFIG:Array(length=5); CONFIG:author; CONFIG:dependencies; CONFIG:description; CONFIG:export-results; CONFIG:generate-dataset; CONFIG:help; CONFIG:keywords; CONFIG:license; CONFIG:name; CONFIG:prettier; CONFIG:preview; CONFIG:run-querier; CONFIG:save-result-1; CONFIG:save-result-2; CONFIG:save-result-3; CONFIG:scripts; CONFIG:sync-files; CONFIG:type; CONFIG:update-complexity; CONFIG:update-coverage; CONFIG:update-csv; CONFIG:update-csv-with-coverage; CONFIG:update-dataflow; CONFIG:update-deps; CONFIG:update-effects; CONFIG:update-error-handling; CONFIG:update-execution-context; CONFIG:update-features; CONFIG:update-functions; CONFIG:update-io; CONFIG:update-loc; CONFIG:update-order; CONFIG:version}","","","N/A","N/A"
"Source","Tools","CSVTools","preview-changes.mjs","","","","","","",".mjs file","Preview Changes ΓÇö Defines isSnapshotArtifact, isSnapshotRow, mainΓÇª | Notes: Project Map Preview/Comparison Tool (Dry Run) [Stateful]","","","isSnapshotArtifact; isSnapshotRow; main; onDirectoryError; reportDiff","process.cwd -> path.join -> path.join -> console.log -> console.log -> console.log -> console.log -> readCsvFile -> console.log -> csvData.headers.findIndex -> toLowerCase -> header.trim -> new Error -> csvData.rows.filter -> isSnapshotRow -> console.log -> scanProjectTree -> console.warn -> fileSystemEntries.filter -> isSnapshotArtifact -> console.log -> console.log -> compareFileSystemToCsv -> reportDiff -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> diff.newEntries.forEach -> console.log -> console.log -> diff.deletedEntries.forEach -> console.log -> console.log -> diff.changedEntries.forEach -> console.log -> console.log -> diff.duplicateCsvEntries.forEach -> console.log -> console.log -> console.log -> SNAPSHOT_NAME_REGEX_NEW.test -> SNAPSHOT_NAME_REGEX_OLD.test -> trim -> segments.push -> segments.join -> isSnapshotArtifact -> catch -> main -> console.error -> console.error -> process.exit","./lib/project-map-sync-core.mjs; node:path","Globals{write=[workspaceRoot, csvPath, sourcePath, SNAPSHOT_NAME_REGEX_NEW, SNAPSHOT_NAME_REGEX_OLD]; read=[Error, isSnapshotRow, isSnapshotArtifact, reportDiff]} | SharedState{import:node:path, import:./lib/project-map-sync-core.mjs}","221","Outputs{COMPONENT:return; LOG:console.error; LOG:console.log; LOG:console.warn}","SideEffects{LOG:console}","15 (Moderate)","mixed (async+await+promises+callbacks) [8% async]","basic (1×.catch(), 1×callbacks) [MEDIUM]"
"Source","Tools","CSVTools","Querier.mjs","","","","","","",".mjs file","Querier ΓÇö Defines buildRowPath, getPath, loadTraversersΓÇª | Notes: QUERIER - CSV QUERY ENGINE WITH PLUGGABLE TRAVERSERS [Stateful]","","","buildRowPath; getPath; loadTraversers; main; matches; parseQueryCell","trim -> text.startsWith -> text.endsWith -> JSON.parse -> filter -> split -> text.toLowerCase -> Promise.all -> TRAVERSER_MODULES.map -> new URL -> new Error -> console.log -> console.log -> console.log -> loadCsvTable -> ensureColumns -> headers.findIndex -> toUpperCase -> header.trim -> new Error -> createValueAccessor -> loadTraversers -> trim -> parseQueryCell -> computeRowPath -> computeRowPath -> traversers.find -> candidate.matches -> traverser.run -> trim -> toString -> console.log -> path.basename -> writeCsvTable -> console.log -> path.relative -> process.cwd -> console.log -> console.log -> catch -> main -> console.error -> process.exit","./lib/table-helpers.mjs; node:path","Globals{write=[REQUIRED_COLUMNS, TRAVERSER_MODULES]; read=[URL, import, meta, Error, error]} | SharedState{import:node:path, import:./lib/table-helpers.mjs}","242","Outputs{COMPONENT:return; LOG:console.error; LOG:console.log}","SideEffects{LOG:console}","14 (Moderate)","mixed (async+await+promises+callbacks) [30% async]","good (3×try/catch, 1×.catch(), 1×callbacks) [LOW]"
"Source","Tools","CSVTools","Querier1.mjs","","","","","","",".mjs file","Querier1 ΓÇö Defines collectText, extractFeature, extractModesΓÇª | Notes: QUERIER1 - FEATURE-MODE COMPARISON TRAVERSER [Stateful]","","","collectText; extractFeature; extractModes; matches; run","String -> query.text.match -> fallback.replace -> Array.isArray -> query.json.modes.map -> MODE_REGEX.exec -> matches.push -> join -> indices.map -> toLowerCase -> toString -> context.query.text.toLowerCase -> text.includes -> text.includes -> extractFeature -> getPath -> extractModes -> modes.push -> feature.toLowerCase -> headers.findIndex -> toUpperCase -> h.trim -> headers.findIndex -> toUpperCase -> h.trim -> headers.findIndex -> toUpperCase -> h.trim -> filter -> new Map -> rows.forEach -> collectText -> content.includes -> context.buildRowPath -> modes.forEach -> toLowerCase -> mode.toString -> content.includes -> buckets.has -> buckets.set -> push -> buckets.get -> otherMatches.push -> lines.push -> modes.join -> modes.forEach -> buckets.get -> lines.push -> lines.push -> forEach -> list.slice -> lines.push -> lines.push -> lines.push -> forEach -> otherMatches.slice -> lines.push -> trim -> getValue -> lines.push -> lines.push -> lines.join","","Globals{write=[MODE_REGEX, text, query, rows, headers, row, getPath, getValue, feature, modes, featureToken, summaryIndex, functionsIndex, orderIndex, searchableIndices, buckets, otherMatches, lines, rowSummary]; read=[feature, modes, matches, context, type, run]} | SharedState{export:default}","255","Outputs{COMPONENT:export; COMPONENT:return}","PURE","19 (Moderate)","callbacks","NONE [HIGH RISK]"
"Source","Tools","CSVTools","Querier2.mjs","","","","","","",".mjs file","Querier2 ΓÇö Defines analyzeMissingData, buildTokenSet, collectColumnValueΓÇª | Notes: LINKAGE QUERY UTILITIES [Stateful]","","","analyzeMissingData; buildTokenSet; collectColumnValue; extractTarget; matches; push; run","String -> String -> query.text.match -> fallback.replace -> new Set -> tokens.add -> value.toLowerCase -> push -> query.json.tokens.forEach -> push -> String -> query.text.toLowerCase -> toLowerCase -> includes -> target.toLowerCase -> queryText.includes -> queryText.includes -> pathLower.includes -> forEach -> join -> indices.map -> toLowerCase -> toString -> headers.findIndex -> toUpperCase -> header.trim -> headers.findIndex -> toUpperCase -> header.trim -> headers.findIndex -> toUpperCase -> header.trim -> trim -> problems.push -> trim -> problems.push -> trim -> problems.push -> context.query.text.toLowerCase -> text.includes -> test -> extractTarget -> getPath -> buildTokenSet -> getPath -> filter -> COLUMN_NAMES.map -> headers.findIndex -> toUpperCase -> header.trim -> headers.findIndex -> toUpperCase -> header.trim -> new Set -> new Map -> rows.forEach -> columnIndices.forEach -> toString -> value.toLowerCase -> some -> Array.from -> lower.includes -> matchedColumns.push -> context.buildRowPath -> matches.push -> analyzeMissingData -> problemMap.set -> split -> forEach -> dependencies.filter -> dependencySet.add -> entry.trim -> lines.push -> join -> Array.from -> forEach -> matches.slice -> lines.push -> lines.push -> entry.columns.join -> lines.push -> lines.push -> lines.push -> forEach -> slice -> Array.from -> lines.push -> lines.push -> Array.from -> problemMap.entries -> lines.push -> lines.push -> forEach -> problemEntries.slice -> lines.push -> issues.join -> lines.push -> matches.filter -> test -> suggestions.push -> dependencySet.has -> suggestions.push -> problemEntries.some -> list.includes -> suggestions.push -> lines.push -> lines.push -> suggestions.forEach -> lines.push -> trim -> getValue -> lines.push -> lines.push -> lines.join","","Globals{write=[COLUMN_NAMES, text, query, rows, headers, row, getPath, getValue, target, tokens, columnIndices, matches, dependencyIndex, dependencySet, problemMap, lines, problemEntries, suggestions, gridMatches, rowSummary]; read=[target, feature, matches, context, type, run]} | SharedState{export:default}","381","Outputs{COMPONENT:export; COMPONENT:return}","PURE","37 (Complex)","callbacks","NONE [HIGH RISK]"
"Source","Tools","CSVTools","Querier3.mjs","","","","","","",".mjs file","Querier3 ΓÇö Defines extractKey, matches, run | Notes: STRUCTURE FINDER QUERY UTILITIES [Stateful]","","","extractKey; matches; run","String -> String -> query.text.match -> fallback.replace -> context.query.text.toLowerCase -> text.includes -> text.includes -> toLowerCase -> extractKey -> getPath -> filter -> STRUCTURE_COLUMNS.map -> headers.findIndex -> toUpperCase -> header.trim -> rows.forEach -> columnIndices.forEach -> toString -> value.includes -> value.includes -> includes -> value.toLowerCase -> matches.push -> context.buildRowPath -> value.slice -> lines.push -> forEach -> matches.slice -> lines.push -> lines.push -> lines.push -> trim -> getValue -> lines.push -> lines.push -> lines.join","","Globals{write=[STRUCTURE_COLUMNS, text, query, rows, headers, row, getPath, getValue, needle, columnIndices, matches, lines, rowSummary]; read=[key, category, matches, context, type, run]} | SharedState{export:default}","182","Outputs{COMPONENT:export; COMPONENT:return}","PURE","19 (Moderate)","callbacks","NONE [HIGH RISK]"
"Source","Tools","CSVTools","Results.mjs","","","","","","",".mjs file","Results ΓÇö Defines ensureLogDirectory, formatEntry, main | Notes: QUERIER RESULTS REPORTER [File IO, Stateful]","","","ensureLogDirectory; formatEntry; main","process.cwd -> path.join -> fs.mkdir -> lines.push -> lines.push -> lines.push -> lines.push -> lines.push -> lines.join -> process.argv.includes -> console.log -> console.log -> console.log -> loadCsvTable -> ensureColumns -> headers.findIndex -> toUpperCase -> header.trim -> createValueAccessor -> rows.forEach -> trim -> trim -> buildRowPath -> entries.push -> console.log -> ensureLogDirectory -> replace -> toISOString -> new Date -> path.join -> join -> entries.map -> formatEntry -> fs.writeFile -> console.log -> path.relative -> process.cwd -> entries.forEach -> writeCsvTable -> console.log -> catch -> main -> console.error -> process.exit","./lib/table-helpers.mjs; node:fs/promises; node:path","Globals{write=[REQUIRED_COLUMNS, workspaceRoot, logDir]} | SharedState{import:node:fs/promises, import:node:path, import:./lib/table-helpers.mjs}","140","Outputs{COMPONENT:return; FILE:fs.writeFile(); LOG:console.error; LOG:console.log}","SideEffects{FILE:write; LOG:console; NON_DETERMINISTIC}","5 (Simple)","mixed (async+await+promises+callbacks) [25% async]","basic (1×.catch(), 1×callbacks) [MEDIUM]"
"Source","Tools","CSVTools","SavedResult1.mjs","","","","","","",".mjs file","SavedResult1 ΓÇö Defines main | Notes: SAVED RESULT SLOT 1 EXPORTER","","","main","saveResultSlot -> console.log -> console.log -> catch -> main -> console.error -> process.exit","./lib/save-result.mjs","SharedState{import:./lib/save-result.mjs}","40","Outputs{LOG:console.error; LOG:console.log}","SideEffects{LOG:console}","2 (Simple)","mixed (async+await+promises+callbacks) [50% async]","basic (1×.catch(), 1×callbacks) [MEDIUM]"
"Source","Tools","CSVTools","SavedResult2.mjs","","","","","","",".mjs file","SavedResult2 ΓÇö Defines main | Notes: SAVED RESULT SLOT 2 EXPORTER","","","main","saveResultSlot -> console.log -> console.log -> catch -> main -> console.error -> process.exit","./lib/save-result.mjs","SharedState{import:./lib/save-result.mjs}","40","Outputs{LOG:console.error; LOG:console.log}","SideEffects{LOG:console}","2 (Simple)","mixed (async+await+promises+callbacks) [50% async]","basic (1×.catch(), 1×callbacks) [MEDIUM]"
"Source","Tools","CSVTools","SavedResult3.mjs","","","","","","",".mjs file","SavedResult3 ΓÇö Defines main | Notes: SAVED RESULT SLOT 3 EXPORTER","","","main","saveResultSlot -> console.log -> console.log -> catch -> main -> console.error -> process.exit","./lib/save-result.mjs","SharedState{import:./lib/save-result.mjs}","40","Outputs{LOG:console.error; LOG:console.log}","SideEffects{LOG:console}","2 (Simple)","mixed (async+await+promises+callbacks) [50% async]","basic (1×.catch(), 1×callbacks) [MEDIUM]"
"Source","Tools","CSVTools","sync-filesystem-to-csv.mjs","","","","","","",".mjs file","Sync Filesystem To Csv ΓÇö Defines buildSnapshotFileName, isSnapshotArtifact, logChangeSummaryΓÇª | Notes: CSV PROJECT MAP - FILE SYSTEM SYNCHRONIZATION SCRIPT [Stateful]","","","buildSnapshotFileName; isSnapshotArtifact; logChangeSummary; main; onDirectoryError; writeSnapshotCopy","process.cwd -> path.join -> path.join -> console.log -> console.log -> console.log -> console.log -> readCsvFile -> console.log -> console.log -> scanProjectTree -> console.warn -> fileSystemEntries.filter -> isSnapshotArtifact -> console.log -> console.log -> compareFileSystemToCsv -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> buildUpdatedRows -> buildSnapshotFileName -> console.log -> console.log -> writeSnapshotCopy -> console.log -> path.relative -> console.log -> path.relative -> logChangeSummary -> console.log -> console.log -> console.log -> console.log -> diff.newEntries.forEach -> console.log -> console.log -> diff.deletedEntries.forEach -> console.log -> console.log -> diff.changedEntries.forEach -> console.log -> console.log -> diff.duplicateCsvEntries.forEach -> console.log -> console.log -> console.log -> console.log -> path.join -> path.dirname -> writeCsvFile -> new Date -> date.toLocaleString -> padStart -> String -> date.getDate -> date.getFullYear -> padStart -> String -> date.getHours -> padStart -> String -> date.getMinutes -> padStart -> String -> date.getSeconds -> date.getHours -> SNAPSHOT_NAME_REGEX_NEW.test -> SNAPSHOT_NAME_REGEX_OLD.test -> catch -> main -> console.error -> console.error -> process.exit","./lib/project-map-sync-core.mjs; node:fs/promises; node:path","Globals{write=[workspaceRoot, csvPath, sourcePath, SNAPSHOT_NAME_REGEX_NEW, SNAPSHOT_NAME_REGEX_OLD]; read=[isSnapshotArtifact, buildSnapshotFileName, writeSnapshotCopy, logChangeSummary]} | SharedState{import:node:fs/promises, import:node:path, import:./lib/project-map-sync-core.mjs}","285","Outputs{COMPONENT:return; LOG:console.error; LOG:console.log; LOG:console.warn}","SideEffects{LOG:console; NON_DETERMINISTIC}","15 (Moderate)","mixed (async+await+promises+callbacks) [17% async]","basic (1×.catch(), 1×callbacks) [MEDIUM]"
"Source","Tools","CSVTools","traverserQuerier2.mjs","","","","","","",".mjs file","TraverserQuerier2 ΓÇö Defines matches, run [Stateful]","","","matches; run","getPath -> lines.push -> SUMMARY_COLUMNS.forEach -> trim -> getValue -> header.toLowerCase -> value.slice -> lines.push -> lines.push -> lines.push -> lines.push -> lines.join","","Globals{write=[SUMMARY_COLUMNS, row, getPath, getValue, pathLabel, lines]; read=[matches, run, context]} | SharedState{export:default}","37","Outputs{COMPONENT:export; COMPONENT:return}","PURE","4 (Simple)","callbacks","NONE [HIGH RISK]"
"Source","Tools","CSVTools","update-csv-workflow-enhanced.mjs","","","","","","",".mjs file","Update Csv Workflow Enhanced ΓÇö Defines executeScript, findLatestSnapshot, isSnapshotFilenameΓÇª [File IO, Stateful]","","","executeScript; findLatestSnapshot; isSnapshotFilename; main","fileURLToPath -> path.dirname -> process.cwd -> new Promise -> console.log -> console.log -> repeat -> spawn -> child.on -> console.log -> repeat -> console.log -> resolve -> reject -> new Error -> child.on -> reject -> new Error -> console.clear -> console.log -> repeat -> console.log -> console.log -> repeat -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> repeat -> Date.now -> path.join -> executeScript -> findLatestSnapshot -> new Error -> console.log -> console.log -> console.log -> repeat -> path.join -> executeScript -> console.log -> repeat -> path.join -> executeScript -> console.log -> repeat -> path.join -> executeScript -> console.log -> repeat -> path.join -> executeScript -> path.join -> executeScript -> path.join -> executeScript -> path.join -> executeScript -> path.join -> executeScript -> path.join -> executeScript -> toFixed -> Date.now -> console.log -> repeat -> console.log -> console.log -> repeat -> console.log -> console.log -> console.log -> console.log -> console.error -> repeat -> console.error -> console.error -> repeat -> console.error -> process.exit -> catch -> main -> console.error -> console.error -> process.exit -> path.join -> fs.readdir -> console.warn -> map -> entries.filter -> entry.isFile -> isSnapshotFilename -> Promise.all -> candidates.map -> path.join -> fs.stat -> stats.mtime.getTime -> test -> test","node:child_process; node:fs/promises; node:path; node:url","Globals{write=[__filename, __dirname, workspaceRoot]; read=[import, meta, Error, findLatestSnapshot, error, isSnapshotFilename, Infinity]} | SharedState{import:node:fs/promises, import:node:path, import:node:url, import:node:child_process}","190","Inputs{FILE:fs.readdir()} | Outputs{COMPONENT:return; LOG:console.error; LOG:console.log; LOG:console.warn}","SideEffects{LOG:console; NON_DETERMINISTIC}","11 (Moderate)","mixed (async+await+promises+callbacks) [27% async]","good (2×try/catch, 1×.catch(), 2×callbacks) [LOW]"
"Source","Tools","CSVTools","update-csv-workflow-with-coverage.mjs","","","","","","",".mjs file","Update Csv Workflow With Coverage ΓÇö Defines executeScript, findLatestSnapshot, isSnapshotFilenameΓÇª [File IO, Stateful]","","","executeScript; findLatestSnapshot; isSnapshotFilename; main","fileURLToPath -> path.dirname -> process.cwd -> new Promise -> console.log -> console.log -> repeat -> spawn -> child.on -> console.log -> repeat -> console.log -> resolve -> reject -> new Error -> child.on -> reject -> new Error -> console.clear -> console.log -> repeat -> console.log -> console.log -> repeat -> console.log -> console.log -> repeat -> Date.now -> path.join -> executeScript -> findLatestSnapshot -> new Error -> console.log -> path.join -> executeScript -> toFixed -> Date.now -> console.log -> repeat -> console.log -> console.log -> repeat -> console.log -> console.log -> console.error -> repeat -> console.error -> console.error -> repeat -> console.error -> process.exit -> catch -> main -> console.error -> console.error -> process.exit -> path.join -> fs.readdir -> console.warn -> map -> entries.filter -> entry.isFile -> isSnapshotFilename -> Promise.all -> candidates.map -> path.join -> fs.stat -> stats.mtime.getTime -> test -> test","node:child_process; node:fs/promises; node:path; node:url","Globals{write=[__filename, __dirname, workspaceRoot]; read=[import, meta, Error, findLatestSnapshot, error, isSnapshotFilename, Infinity]} | SharedState{import:node:fs/promises, import:node:path, import:node:url, import:node:child_process}","115","Inputs{FILE:fs.readdir()} | Outputs{COMPONENT:return; LOG:console.error; LOG:console.log; LOG:console.warn}","SideEffects{LOG:console; NON_DETERMINISTIC}","11 (Moderate)","mixed (async+await+promises+callbacks) [27% async]","good (2×try/catch, 1×.catch(), 2×callbacks) [LOW]"
"Source","Tools","CSVTools","update-csv-workflow.mjs","","","","","","",".mjs file","Update Csv Workflow ΓÇö Defines executeScript, findLatestSnapshot, isSnapshotFilenameΓÇª [File IO, Stateful]","","","executeScript; findLatestSnapshot; isSnapshotFilename; main","fileURLToPath -> path.dirname -> process.cwd -> new Promise -> console.log -> console.log -> repeat -> spawn -> child.on -> console.log -> repeat -> console.log -> resolve -> reject -> new Error -> child.on -> reject -> new Error -> console.clear -> console.log -> repeat -> console.log -> console.log -> repeat -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> console.log -> repeat -> Date.now -> path.join -> executeScript -> findLatestSnapshot -> new Error -> console.log -> console.log -> console.log -> repeat -> path.join -> executeScript -> path.join -> executeScript -> path.join -> executeScript -> path.join -> executeScript -> path.join -> executeScript -> path.join -> executeScript -> path.join -> executeScript -> path.join -> executeScript -> path.join -> executeScript -> path.join -> executeScript -> path.join -> executeScript -> toFixed -> Date.now -> console.log -> repeat -> console.log -> console.log -> repeat -> console.log -> console.log -> console.log -> console.log -> console.error -> repeat -> console.error -> console.error -> repeat -> console.error -> process.exit -> catch -> main -> console.error -> console.error -> process.exit -> path.join -> fs.readdir -> console.warn -> map -> entries.filter -> entry.isFile -> isSnapshotFilename -> Promise.all -> candidates.map -> path.join -> fs.stat -> stats.mtime.getTime -> test -> test","node:child_process; node:fs/promises; node:path; node:url","Globals{write=[__filename, __dirname, workspaceRoot]; read=[import, meta, Error, findLatestSnapshot, error, isSnapshotFilename, Infinity]} | SharedState{import:node:fs/promises, import:node:path, import:node:url, import:node:child_process}","220","Inputs{FILE:fs.readdir()} | Outputs{COMPONENT:return; LOG:console.error; LOG:console.log; LOG:console.warn}","SideEffects{LOG:console; NON_DETERMINISTIC}","11 (Moderate)","mixed (async+await+promises+callbacks) [27% async]","good (2×try/catch, 1×.catch(), 2×callbacks) [LOW]"
"Source","Tools","CSVTools","update-functions.mjs","","","","","","",".mjs file","Update Functions ΓÇö Defines extractFunctionNames, extractIdentifierFromProperty, extractKeyNameΓÇª | Notes: UPDATE-FUNCTIONS.MJS - Function Name Extraction and CSV Update Script [File IO, Stateful]","","","extractFunctionNames; extractIdentifierFromProperty; extractKeyName; extractNameFromMemberExpression; handleAssignmentExpression; handleClassMethod; handleClassPrivateMethod; handleClassProperty; handleObjectMethod; handleObjectProperty; handleVariableDeclarator; isFunctionLike; isRequireCall; isSupportedScriptType; parseCsv; quoteForCsv; resolveCsvPath; sanitizeForParsing; trackCalledIdentifier; traverseAst","process.cwd -> resolveCsvPath -> fs.readFile -> parseCsv -> new Error -> headers.findIndex -> toUpperCase -> value.trim -> new Error -> headers.findIndex -> toUpperCase -> value.trim -> new Error -> toLowerCase -> trim -> replace -> isSupportedScriptType -> trim -> replace -> pathSegments.push -> pathSegments.reduce -> path.join -> path.join -> toLowerCase -> path.extname -> console.log -> fs.readFile -> console.warn -> trim -> currentRaw.replace -> updatedEntries.push -> Promise.race -> Promise.resolve -> extractCSharpMethodNames -> new Promise -> setTimeout -> reject -> new Error -> console.log -> console.warn -> console.warn -> extractPythonFunctionNames -> console.log -> console.warn -> sanitizeForParsing -> extractFunctionNames -> console.log -> console.warn -> functionNames.join -> console.log -> updatedEntries.push -> console.log -> console.log -> process.exit -> concat -> join -> rows.map -> fields.push -> quoteForCsv -> fields.join -> fs.writeFile -> console.log -> console.log -> String -> stringValue.replace -> currentRow.push -> currentRow.push -> records.push -> currentRow.push -> records.push -> currentRow.push -> records.push -> records.0.map -> trim -> header.replace -> filter -> records.slice -> row.some -> trim -> typeValue.endsWith -> supported.some -> typeValue.endsWith -> prettier.__debug.parse -> console.warn -> new Set -> new Set -> new Set -> traverseAst -> declaredNames.add -> declaredNames.add -> handleVariableDeclarator -> handleAssignmentExpression -> handleObjectProperty -> handleObjectMethod -> handleClassMethod -> handleClassPrivateMethod -> handleClassProperty -> trackCalledIdentifier -> declaredNames.add -> calledIdentifiers.has -> declaredNames.add -> sort -> Array.from -> a.localeCompare -> isFunctionLike -> declaredNames.add -> isRequireCall -> declaredNames.add -> extractIdentifierFromProperty -> importedCandidates.add -> isFunctionLike -> extractNameFromMemberExpression -> declaredNames.add -> isFunctionLike -> declaredNames.add -> isFunctionLike -> extractKeyName -> declaredNames.add -> extractKeyName -> declaredNames.add -> extractKeyName -> declaredNames.add -> declaredNames.add -> isFunctionLike -> extractKeyName -> declaredNames.add -> calledIdentifiers.add -> source.replace -> visitor -> Object.keys -> Array.isArray -> traverseAst -> traverseAst -> key.value.toString -> node.property.value.toString -> path.isAbsolute -> path.join -> path.join","./lib/csharp-analysis.mjs; ./lib/python-analysis.mjs; node:fs/promises; node:path; prettier; prettier/plugins/babel","Globals{write=[workspaceRoot, csvOverride, csvPath, csvText, headers, dataRows, rows, headerCount, typeColumnIndex, functionsColumnIndex, updatedEntries, processedCount, totalRows, rowIndex, row, typeRaw, pathSegments, colIndex, segment, relativePath, absolutePath, ext, sourceText, currentRaw, currentTrimmed, functionNames, sanitizedSource, nextValue, updatedCsv, entry]; read=[resolveCsvPath, parseCsv, Error, isSupportedScriptType, error, sanitizeForParsing, extractFunctionNames, quoteForCsv, traverseAst, handleVariableDeclarator, handleAssignmentExpression, handleObjectProperty, handleObjectMethod, handleClassMethod, handleClassPrivateMethod, handleClassProperty, trackCalledIdentifier, isFunctionLike, isRequireCall, extractIdentifierFromProperty, extractNameFromMemberExpression, extractKeyName]} | SharedState{import:node:fs/promises, import:node:path, import:prettier, import:prettier/plugins/babel, import:./lib/csharp-analysis.mjs, import:./lib/python-analysis.mjs}","805","Inputs{FILE:fs.readFile()} | Outputs{COMPONENT:return; FILE:fs.writeFile(); LOG:console.log; LOG:console.warn}","SideEffects{FILE:read; FILE:write; LOG:console; STATE:module; TIMER}","142 (Very High)","mixed (async+await+promises+callbacks) [3% async]","good (5×try/catch) [LOW]"
"Source","Tools","CSVTools","updateBehaviors.mjs","","","","","","",".mjs file","UpdateBehaviors","","","","","","","0","","PURE","1 (Simple)","sync","NONE [HIGH RISK]"
"Source","Tools","CSVTools","updateCyclomaticComplexity.mjs","","","","","","",".mjs file","UpdateCyclomaticComplexity ΓÇö Defines buildRelativePath, calculateCyclomaticComplexity, classifyComplexityΓÇª [File IO, Stateful]","","","buildRelativePath; calculateCyclomaticComplexity; classifyComplexity; formatComplexityValue; isSupportedType; main; traverseAst","process.cwd -> new Set -> console.log -> console.log -> console.log -> loadCsvTable -> headers.findIndex -> toUpperCase -> header.trim -> new Error -> ensureColumn -> console.log -> toLowerCase -> trim -> isSupportedType -> buildRelativePath -> path.join -> fs.readFile -> console.warn -> calculateCyclomaticComplexity -> formatComplexityValue -> trim -> console.log -> writeCsvTable -> resolveCsvPath -> console.log -> console.log -> typeValue.endsWith -> typeValue.split -> SUPPORTED_EXTENSIONS.has -> trim -> segments.push -> segments.reduce -> path.join -> prettier.__debug.parse -> console.warn -> path.relative -> traverseAst -> visitor -> Object.keys -> Array.isArray -> value.forEach -> traverseAst -> traverseAst -> classifyComplexity -> catch -> main -> console.error -> process.exit","./lib/table-helpers.mjs; node:fs/promises; node:path; prettier; prettier/plugins/babel","Globals{write=[workspaceRoot, csvOverride, SUPPORTED_EXTENSIONS]; read=[undefined, Error, isSupportedType, buildRelativePath, error, calculateCyclomaticComplexity, formatComplexityValue, traverseAst, classifyComplexity]} | SharedState{import:node:fs/promises, import:node:path, import:prettier, import:prettier/plugins/babel, import:./lib/table-helpers.mjs}","160","Inputs{FILE:fs.readFile()} | Outputs{COMPONENT:return; LOG:console.error; LOG:console.log; LOG:console.warn}","SideEffects{FILE:read; LOG:console}","38 (Complex)","mixed (async+await+promises+callbacks) [17% async]","good (2×try/catch, 1×.catch(), 1×callbacks) [LOW]"
"Source","Tools","CSVTools","updateDataFlow.mjs","","","","","","",".mjs file","UpdateDataFlow ΓÇö Defines collectJsonReferences, createAnalysisContext, createScopeΓÇª [File IO, Stateful]","","","collectJsonReferences; createAnalysisContext; createScope; declare; extractAssignmentTargets; extractDataFlowSummary; extractPatternNames; formatSummary; getExpressionName; handleAssignmentExpression; handleCallExpression; handleIdentifier; handleUpdateExpression; isDeclared; isIdentifierNamed; isLikelyReference; isReferenceIdentifier; isSupportedScriptType; main; parseCsv; quoteForCsv; resolveCsvPath; sanitizeForParsing; summarizeCssDataFlow; summarizeHtmlDataFlow; summarizeJsonDataFlow; walkChildren; walkNode","process.cwd -> resolveCsvPath -> new Set -> new Set -> console.log -> console.log -> console.log -> fs.readFile -> parseCsv -> new Error -> table.0.map -> trim -> value.replace -> headers.findIndex -> header.toUpperCase -> new Error -> headers.findIndex -> header.toUpperCase -> console.log -> headers.findIndex -> toUpperCase -> header.trim -> headers.splice -> row.push -> row.splice -> console.log -> toLowerCase -> trim -> isSupportedScriptType -> trim -> pathSegments.push -> pathSegments.reduce -> path.join -> path.join -> fs.readFile -> console.warn -> toLowerCase -> path.extname -> sanitizeForParsing -> extractDataFlowSummary -> trim -> replace -> updatedEntries.push -> console.log -> table.map -> cells.push -> quoteForCsv -> cells.join -> normalizedRows.join -> fs.writeFile -> console.log -> updatedEntries.forEach -> entry.summary.split -> join -> segments.slice -> console.log -> summarizeCssDataFlow -> summarizeJsonDataFlow -> summarizeHtmlDataFlow -> summarizeCSharpDataFlow -> summarizePythonDataFlow -> console.warn -> prettier.__debug.parse -> console.warn -> createAnalysisContext -> createScope -> walkNode -> formatSummary -> new Set -> new Set -> new Set -> new Set -> new Set -> new Set -> new Set -> new Set -> parts.push -> join -> Array.from -> parts.push -> join -> Array.from -> sections.push -> parts.join -> parts.push -> join -> Array.from -> parts.push -> join -> Array.from -> parts.push -> join -> Array.from -> sections.push -> parts.join -> sections.push -> join -> Array.from -> sections.push -> join -> Array.from -> sections.push -> join -> Array.from -> sections.join -> node.body.forEach -> walkNode -> node.body.forEach -> walkNode -> node.declarations.forEach -> extractPatternNames -> names.forEach -> declare -> names.forEach -> context.globalsWritten.add -> walkNode -> declare -> createScope -> node.params.forEach -> forEach -> extractPatternNames -> declare -> walkNode -> createScope -> declare -> node.params.forEach -> forEach -> extractPatternNames -> declare -> walkNode -> declare -> context.globalsWritten.add -> walkChildren -> context.sharedState.add -> node.specifiers.forEach -> declare -> context.sharedState.add -> node.specifiers.forEach -> context.sharedState.add -> walkNode -> context.sharedState.add -> walkNode -> handleAssignmentExpression -> walkNode -> walkNode -> handleUpdateExpression -> walkNode -> handleCallExpression -> handleIdentifier -> walkChildren -> Object.keys -> excludeKeys.includes -> Array.isArray -> value.forEach -> walkNode -> walkNode -> extractAssignmentTargets -> targets.forEach -> isDeclared -> BUILTIN_GLOBALS.has -> context.globalsWritten.add -> isDeclared -> BUILTIN_GLOBALS.has -> context.globalsWritten.add -> isReferenceIdentifier -> BUILTIN_GLOBALS.has -> isDeclared -> context.globalsRead.add -> isIdentifierNamed -> context.domCreated.add -> isIdentifierNamed -> context.domQueried.add -> context.domQueried.add -> context.domQueried.add -> includes -> context.domModified.add -> context.domModified.add -> getExpressionName -> context.eventListeners.add -> getExpressionName -> context.storageOps.add -> new Set -> scope.declared.add -> current.declared.has -> names.push -> pattern.properties.forEach -> names.push -> extractPatternNames -> names.push -> extractPatternNames -> pattern.elements.forEach -> names.push -> extractPatternNames -> names.push -> extractPatternNames -> names.push -> extractPatternNames -> extractPatternNames -> extractAssignmentTargets -> getExpressionName -> getExpressionName -> getExpressionName -> getExpressionName -> new Set -> new Set -> new Set -> importRegex.exec -> imports.add -> urlRegex.exec -> urls.add -> customPropRegex.exec -> customProps.add -> code.match -> parts.push -> join -> Array.from -> parts.push -> join -> Array.from -> parts.push -> join -> Array.from -> parts.push -> parts.join -> JSON.parse -> new Set -> collectJsonReferences -> parts.push -> Array.isArray -> Array.isArray -> slice -> Object.keys -> parts.push -> keys.join -> parts.push -> join -> Array.from -> parts.join -> new Set -> new Set -> new Set -> new Set -> new Set -> idRegex.exec -> ids.add -> classRegex.exec -> forEach -> filter -> match.1.split -> classes.add -> scriptRegex.exec -> scripts.add -> linkRegex.exec -> links.add -> eventRegex.exec -> events.add -> match.1.toLowerCase -> parts.push -> join -> Array.from -> parts.push -> join -> Array.from -> parts.push -> join -> Array.from -> parts.push -> join -> Array.from -> parts.push -> join -> Array.from -> parts.join -> Array.isArray -> value.forEach -> collectJsonReferences -> forEach -> Object.values -> collectJsonReferences -> isLikelyReference -> refs.add -> test -> test -> str.startsWith -> str.startsWith -> source.replace -> String -> stringValue.replace -> currentRow.push -> currentRow.push -> records.push -> currentRow.push -> records.push -> currentRow.push -> records.push -> path.isAbsolute -> path.join -> path.join -> typeValue.endsWith -> some -> Array.from -> typeValue.endsWith -> catch -> main -> console.error -> process.exit","./lib/csharp-analysis.mjs; ./lib/python-analysis.mjs; node:fs/promises; node:path; prettier; prettier/plugins/babel","Globals{write=[workspaceRoot, csvOverride, csvPath, SUPPORTED_EXTENSIONS, BUILTIN_GLOBALS]; read=[resolveCsvPath, parseCsv, Error, isSupportedScriptType, error, sanitizeForParsing, extractDataFlowSummary, quoteForCsv, summarizeCssDataFlow, summarizeJsonDataFlow, summarizeHtmlDataFlow, createAnalysisContext, createScope, walkNode, formatSummary, extractPatternNames, declare, walkChildren, handleAssignmentExpression, handleUpdateExpression, handleCallExpression, handleIdentifier, extractAssignmentTargets, isDeclared, isReferenceIdentifier, isIdentifierNamed, getExpressionName, collectJsonReferences, isLikelyReference]} | SharedState{import:node:fs/promises, import:node:path, import:prettier, import:prettier/plugins/babel, import:./lib/csharp-analysis.mjs, import:./lib/python-analysis.mjs}","855","Inputs{FILE:fs.readFile()} | Outputs{COMPONENT:return; FILE:fs.writeFile(); LOG:console.error; LOG:console.log; LOG:console.warn}","SideEffects{FILE:read; FILE:write; LOG:console}","239 (Very High)","mixed (async+await+promises+callbacks) [4% async]","good (4×try/catch, 1×.catch(), 1×callbacks) [LOW]"
"Source","Tools","CSVTools","updateDependencies.mjs","","","","","","",".mjs file","UpdateDependencies ΓÇö Defines collectJsonStrings, extractCssDependencies, extractDependenciesForExtensionΓÇª [File IO, Stateful]","","","collectJsonStrings; extractCssDependencies; extractDependenciesForExtension; extractHtmlDependencies; extractJsDependencies; extractJsonDependencies; isLikelyReference; isSupportedScriptType; main; parseCsv; quoteForCsv; resolveCsvPath; sanitizeForParsing; traverseAst","process.cwd -> resolveCsvPath -> new Set -> console.log -> console.log -> console.log -> fs.readFile -> parseCsv -> new Error -> table.0.map -> trim -> value.replace -> headers.findIndex -> header.toUpperCase -> new Error -> headers.findIndex -> header.toUpperCase -> console.log -> headers.findIndex -> toUpperCase -> header.trim -> headers.splice -> row.push -> row.splice -> console.log -> toLowerCase -> trim -> isSupportedScriptType -> trim -> pathSegments.push -> pathSegments.reduce -> path.join -> path.join -> fs.readFile -> console.warn -> toLowerCase -> path.extname -> sanitizeForParsing -> extractDependenciesForExtension -> sort -> Array.from -> a.localeCompare -> sortedDeps.join -> trim -> replace -> updatedEntries.push -> console.log -> table.map -> cells.push -> quoteForCsv -> cells.join -> normalizedRows.join -> fs.writeFile -> console.log -> updatedEntries.forEach -> join -> entry.dependencies.slice -> entry.dependencies.join -> console.log -> extractCssDependencies -> extractJsonDependencies -> extractHtmlDependencies -> extractCSharpDependencies -> extractPythonDependencies -> new Set -> console.warn -> new Set -> extractJsDependencies -> prettier.__debug.parse -> console.warn -> new Set -> new Set -> traverseAst -> dependencies.add -> String -> dependencies.add -> String -> dependencies.add -> String -> dependencies.add -> String -> visitor -> Object.keys -> Array.isArray -> traverseAst -> traverseAst -> String -> stringValue.replace -> currentRow.push -> currentRow.push -> records.push -> currentRow.push -> records.push -> currentRow.push -> records.push -> path.isAbsolute -> path.join -> path.join -> typeValue.endsWith -> some -> Array.from -> typeValue.endsWith -> source.replace -> new Set -> importRegex.exec -> results.add -> urlRegex.exec -> value.startsWith -> results.add -> new Set -> JSON.parse -> collectJsonStrings -> new Set -> scriptRegex.exec -> results.add -> linkRegex.exec -> results.add -> imgRegex.exec -> results.add -> dataImportRegex.exec -> results.add -> Array.isArray -> value.forEach -> collectJsonStrings -> forEach -> Object.values -> collectJsonStrings -> isLikelyReference -> results.add -> test -> test -> catch -> main -> console.error -> process.exit","./lib/csharp-analysis.mjs; ./lib/python-analysis.mjs; node:fs/promises; node:path; prettier; prettier/plugins/babel","Globals{write=[workspaceRoot, csvOverride, csvPath, SUPPORTED_EXTENSIONS]; read=[resolveCsvPath, parseCsv, Error, isSupportedScriptType, error, sanitizeForParsing, extractDependenciesForExtension, quoteForCsv, extractCssDependencies, extractJsonDependencies, extractHtmlDependencies, extractJsDependencies, traverseAst, collectJsonStrings, isLikelyReference]} | SharedState{import:node:fs/promises, import:node:path, import:prettier, import:prettier/plugins/babel, import:./lib/csharp-analysis.mjs, import:./lib/python-analysis.mjs}","393","Inputs{FILE:fs.readFile()} | Outputs{COMPONENT:return; FILE:fs.writeFile(); LOG:console.error; LOG:console.log; LOG:console.warn}","SideEffects{FILE:read; FILE:write; LOG:console}","90 (Very High)","mixed (async+await+promises+callbacks) [11% async]","good (4×try/catch, 1×.catch(), 1×callbacks) [LOW]"
"Source","Tools","CSVTools","updateErrorHandlingCoverage.mjs","","","","","","",".mjs file","UpdateErrorHandlingCoverage ΓÇö Defines analyzeErrorHandling, buildRelativePath, categorizeErrorHandlingΓÇª [File IO, Stateful]","","","analyzeErrorHandling; buildRelativePath; categorizeErrorHandling; containsAwait; countErrorCallbackArgs; countMatches; extendsError; formatErrorHandling; isErrorParameter; isMemberExpressionNamed; isSupportedType; main; traverseAst","process.cwd -> new Set -> console.log -> console.log -> console.log -> loadCsvTable -> resolveCsvPath -> headers.findIndex -> toUpperCase -> header.trim -> new Error -> headers.findIndex -> toUpperCase -> header.trim -> ensureColumn -> ensureColumn -> headers.findIndex -> toUpperCase -> header.trim -> headers.findIndex -> toUpperCase -> header.trim -> headers.findIndex -> toUpperCase -> header.trim -> toLowerCase -> trim -> trim -> isSupportedType -> buildRelativePath -> path.join -> fs.readFile -> console.warn -> analyzeErrorHandling -> parseInt -> replace -> toLowerCase -> categorizeErrorHandling -> parseInt -> split -> highRiskCandidates.push -> Number.isNaN -> formatErrorHandling -> console.log -> writeCsvTable -> console.log -> console.log -> console.log -> forEach -> Object.entries -> toFixed -> console.log -> category.padEnd -> padStart -> count.toString -> console.log -> forEach -> Object.entries -> toFixed -> console.log -> risk.padEnd -> padStart -> count.toString -> console.log -> console.log -> countMatches -> includes -> ioValue.toUpperCase -> startsWith -> errorValue.toUpperCase -> countMatches -> includes -> execValue.toLowerCase -> startsWith -> errorValue.toUpperCase -> countMatches -> includes -> sideValue.toUpperCase -> startsWith -> errorValue.toUpperCase -> console.log -> console.log -> console.log -> console.log -> forEach -> slice -> highRiskCandidates.sort -> console.log -> rows.reduce -> predicate -> typeValue.endsWith -> typeValue.split -> SUPPORTED_EXTENSIONS.has -> trim -> segments.push -> segments.reduce -> path.join -> prettier.__debug.parse -> console.warn -> path.relative -> traverseAst -> containsAwait -> isMemberExpressionNamed -> countErrorCallbackArgs -> extendsError -> Object.keys -> Array.isArray -> containsAwait -> containsAwait -> args.forEach -> isErrorParameter -> test -> param.properties.some -> test -> test -> test -> execValue.includes -> execValue.includes -> toFixed -> detailParts.push -> detailParts.push -> detailParts.push -> detailParts.push -> detailParts.join -> score.toFixed -> trim -> visitor -> Object.keys -> Array.isArray -> value.forEach -> traverseAst -> traverseAst -> catch -> main -> console.error -> process.exit","./lib/table-helpers.mjs; node:fs/promises; node:path; prettier; prettier/plugins/babel","Globals{write=[workspaceRoot, csvOverride, SUPPORTED_EXTENSIONS]; read=[undefined, Error, isSupportedType, buildRelativePath, error, analyzeErrorHandling, parseInt, categorizeErrorHandling, formatErrorHandling, countMatches, traverseAst, containsAwait, isMemberExpressionNamed, countErrorCallbackArgs, extendsError, isErrorParameter]} | SharedState{import:node:fs/promises, import:node:path, import:prettier, import:prettier/plugins/babel, import:./lib/table-helpers.mjs}","438","Inputs{FILE:fs.readFile()} | Outputs{COMPONENT:return; LOG:console.error; LOG:console.log; LOG:console.warn}","SideEffects{FILE:read; LOG:console}","109 (Very High)","mixed (async+await+promises+callbacks) [6% async]","good (2×try/catch, 1×.catch(), 1×callbacks) [LOW]"
"Source","Tools","CSVTools","updateExecutionContext.mjs","","","","","","",".mjs file","UpdateExecutionContext ΓÇö Defines analyzeExecutionContext, buildRelativePath, formatExecutionContextΓÇª | Notes: CSV PROJECT MAP - EXECUTION CONTEXT EXTRACTION SCRIPT [File IO, Stateful]","","","analyzeExecutionContext; buildRelativePath; formatExecutionContext; getCallName; hasInlineCallback; inspectCallExpression; isFunctionNode; isIdentifierNamed; isMemberExpressionNamed; isSupportedType; main; traverseAst","process.cwd -> new Set -> new Set -> console.log -> console.log -> console.log -> loadCsvTable -> resolveCsvPath -> headers.findIndex -> toUpperCase -> header.trim -> new Error -> ensureColumn -> toLowerCase -> trim -> trim -> isSupportedType -> buildRelativePath -> path.join -> fs.readFile -> console.warn -> analyzeExecutionContext -> formatExecutionContext -> console.log -> writeCsvTable -> console.log -> console.log -> console.log -> console.log -> typeValue.endsWith -> typeValue.split -> SUPPORTED_EXTENSIONS.has -> trim -> segments.push -> segments.reduce -> path.join -> prettier.__debug.parse -> console.warn -> path.relative -> new Set -> traverseAst -> isFunctionNode -> isIdentifierNamed -> inspectCallExpression -> Math.min -> Math.round -> getCallName -> callName.endsWith -> stats.blockingReasons.add -> test -> stats.blockingReasons.add -> test -> stats.blockingReasons.add -> test -> stats.blockingReasons.add -> isMemberExpressionNamed -> isMemberExpressionNamed -> isMemberExpressionNamed -> pop -> callName.split -> CALLBACK_APIS.has -> CALLBACK_APIS.has -> isMemberExpressionNamed -> hasInlineCallback -> args.some -> getCallName -> getCallName -> detailParts.push -> detailParts.push -> detailParts.push -> detailParts.push -> details.push -> detailParts.join -> details.join -> detailParts.join -> visitor -> Object.keys -> Array.isArray -> value.forEach -> traverseAst -> traverseAst -> catch -> main -> console.error -> process.exit","./lib/table-helpers.mjs; node:fs/promises; node:path; prettier; prettier/plugins/babel","Globals{write=[workspaceRoot, csvOverride, SUPPORTED_EXTENSIONS, CALLBACK_APIS]; read=[undefined, Error, isSupportedType, buildRelativePath, error, analyzeExecutionContext, formatExecutionContext, traverseAst, isFunctionNode, isIdentifierNamed, inspectCallExpression, getCallName, isMemberExpressionNamed, hasInlineCallback]} | SharedState{import:node:fs/promises, import:node:path, import:prettier, import:prettier/plugins/babel, import:./lib/table-helpers.mjs}","469","Inputs{FILE:fs.readFile()} | Outputs{COMPONENT:return; LOG:console.error; LOG:console.log; LOG:console.warn}","SideEffects{FILE:read; LOG:console}","85 (Very High)","mixed (async+await+promises+callbacks) [11% async]","good (2×try/catch, 1×.catch(), 1×callbacks) [LOW]"
"Source","Tools","CSVTools","updateFeatures.mjs","","","","","","",".mjs file","UpdateFeatures ΓÇö Defines buildCommentPatterns, buildFeatureSynopsis, buildRelativePathΓÇª | Notes: UPDATEFEATURES.MJS - Feature Synopsis Generator for CSV Project Map [File IO, Stateful]","","","buildCommentPatterns; buildFeatureSynopsis; buildRelativePath; buildTags; cleanComment; extractCommentSnippet; extractCommentSnippetFromSource; extractFeatureName; extractFirstSentence; isFileRow; main; parseFunctions; pickDescriptor; shortenText; shouldSkipFeatureExtraction; toTitleCase","process.cwd -> console.log -> console.log -> console.log -> loadCsvTable -> headers.findIndex -> toUpperCase -> header.trim -> new Error -> ensureColumn -> createValueAccessor -> toLowerCase -> trim -> isFileRow -> buildRelativePath -> path.join -> toLowerCase -> path.extname -> shouldSkipFeatureExtraction -> extractCommentSnippet -> extractFeatureName -> trim -> getValue -> trim -> getValue -> trim -> getValue -> trim -> getValue -> trim -> getValue -> buildFeatureSynopsis -> trim -> console.log -> writeCsvTable -> console.log -> typeValue.endsWith -> trim -> toTitleCase -> value.replace -> parseFunctions -> pickDescriptor -> buildTags -> parts.push -> parts.push -> tags.join -> parts.join -> filter -> map -> cell.split -> entry.trim -> trim -> summary.replace -> descriptorParts.push -> shortenText -> extractFirstSentence -> join -> functions.slice -> descriptorParts.push -> descriptorParts.push -> shortenText -> descriptorParts.join -> text.match -> trimEnd -> text.slice -> new Set -> dataFlow.toLowerCase -> ioSummary.toLowerCase -> sideEffects.toLowerCase -> test -> lcSideEffects.includes -> lcSideEffects.includes -> tags.add -> lcIo.includes -> lcSideEffects.includes -> tags.add -> lcIo.includes -> lcSideEffects.includes -> tags.add -> lcIo.includes -> lcSideEffects.includes -> tags.add -> lcIo.includes -> lcSideEffects.includes -> tags.add -> lcDataFlow.includes -> lcSideEffects.includes -> tags.add -> tags.add -> tags.add -> tags.add -> slice -> Array.from -> join -> map -> filter -> value.split -> toUpperCase -> segment.charAt -> segment.slice -> trim -> segments.push -> segments.reduce -> path.join -> new Set -> excluded.has -> fs.readFile -> extractCommentSnippetFromSource -> shortenText -> source.replace -> trimmed.slice -> buildCommentPatterns -> head.match -> cleanComment -> jsLike.includes -> replace -> text.replace -> replace -> text.replace -> replace -> text.replace -> text.replace -> text.replace -> text.replace -> map -> map -> text.split -> line.trim -> trim -> replace -> line.replace -> lines.filter -> test -> trim -> replace -> filtered.join -> catch -> main -> console.error -> process.exit","./lib/table-helpers.mjs; node:fs/promises; node:path","Globals{write=[csvOverride, workspaceRoot]; read=[undefined, Error, isFileRow, buildRelativePath, shouldSkipFeatureExtraction, extractCommentSnippet, extractFeatureName, buildFeatureSynopsis, toTitleCase, parseFunctions, pickDescriptor, buildTags, shortenText, extractFirstSentence, extractCommentSnippetFromSource, buildCommentPatterns, cleanComment]} | SharedState{import:node:fs/promises, import:node:path, import:./lib/table-helpers.mjs}","614","Inputs{FILE:fs.readFile()} | Outputs{COMPONENT:return; LOG:console.error; LOG:console.log}","SideEffects{FILE:read; LOG:console}","57 (Very High)","mixed (async+await+promises+callbacks) [8% async]","basic (1×try/catch, 1×.catch(), 1×callbacks) [MEDIUM]"
"Source","Tools","CSVTools","updateInputSourcesOutputDestinations.mjs","","","","","","",".mjs file","UpdateInputSourcesOutputDestinations ΓÇö Defines analyzeCssIO, analyzeHtmlIO, analyzeJsonIOΓÇª | Notes: CSV PROJECT MAP - INPUT SOURCES AND OUTPUT DESTINATIONS EXTRACTION [File IO, Stateful]","","","analyzeCssIO; analyzeHtmlIO; analyzeJsonIO; analyzeNode; analyzeScriptIO; buildSummary; createIoContext; extractJsonKeys; extractLiteralValue; getCalleeChain; getMemberChain; getPropertyName; handleAssignmentExpression; handleCallExpression; handleMemberExpression; isFsReadCall; isFsWriteCall; main; parseCsv; quoteForCsv; resolveCsvPath; sanitizeForParsing; traverseAst","process.cwd -> resolveCsvPath -> new Set -> new Set -> new Set -> new Set -> new Set -> console.log -> console.log -> console.log -> fs.readFile -> parseCsv -> new Error -> table.0.map -> trim -> value.replace -> headers.findIndex -> header.toUpperCase -> new Error -> headers.findIndex -> header.toUpperCase -> console.log -> headers.findIndex -> toUpperCase -> header.trim -> headers.splice -> row.push -> row.splice -> console.log -> toLowerCase -> trim -> trim -> pathSegments.push -> pathSegments.reduce -> path.join -> path.join -> toLowerCase -> path.extname -> fs.readFile -> console.warn -> analyzeCssIO -> analyzeJsonIO -> analyzeHtmlIO -> analyzeCSharpIO -> buildSummary -> analyzePythonIO -> console.warn -> SUPPORTED_EXTENSIONS.has -> analyzeScriptIO -> trim -> replace -> console.log -> table.map -> cells.push -> quoteForCsv -> cells.join -> normalizedRows.join -> fs.writeFile -> console.log -> sanitizeForParsing -> prettier.__debug.parse -> console.warn -> createIoContext -> traverseAst -> analyzeNode -> buildSummary -> handleCallExpression -> handleMemberExpression -> handleAssignmentExpression -> context.outputs.add -> context.outputs.add -> getCalleeChain -> chain.join -> extractLiteralValue -> context.inputs.add -> DOM_READ_METHODS.has -> name.endsWith -> context.inputs.add -> DOM_WRITE_METHODS.has -> DOM_WRITE_METHODS.has -> context.outputs.add -> isFsReadCall -> context.inputs.add -> isFsWriteCall -> context.outputs.add -> name.startsWith -> context.inputs.add -> context.inputs.add -> context.inputs.add -> context.outputs.add -> context.outputs.add -> includes -> context.outputs.add -> context.inputs.add -> ADOBE_IDENTIFIERS.has -> context.outputs.add -> getMemberChain -> chain.join -> DOM_READ_METHODS.has -> context.inputs.add -> ADOBE_IDENTIFIERS.has -> context.outputs.add -> ADOBE_INPUT_PROPERTIES.has -> context.inputs.add -> getMemberChain -> chain.join -> context.outputs.add -> context.outputs.add -> context.outputs.add -> context.outputs.add -> new Set -> new Set -> importRegex.exec -> inputs.add -> urlRegex.exec -> value.startsWith -> inputs.add -> buildSummary -> new Set -> new Set -> formRegex.exec -> inputs.add -> inputRegex.exec -> inputs.add -> buttonRegex.exec -> inputs.add -> selectRegex.exec -> inputs.add -> uiRegex.exec -> outputs.add -> buildSummary -> new Set -> JSON.parse -> extractJsonKeys -> buildSummary -> new Set -> Array.isArray -> inputs.add -> value.forEach -> extractJsonKeys -> forEach -> Object.keys -> inputs.add -> extractJsonKeys -> sort -> Array.from -> sort -> Array.from -> segments.push -> inputs.join -> segments.push -> outputs.join -> segments.join -> new Set -> new Set -> currentRow.push -> currentRow.push -> records.push -> currentRow.push -> records.push -> currentRow.push -> records.push -> String -> stringValue.replace -> path.isAbsolute -> path.join -> path.join -> source.replace -> visitor -> Object.keys -> Array.isArray -> traverseAst -> traverseAst -> getCalleeChain -> getPropertyName -> getMemberChain -> getPropertyName -> String -> test -> test -> test -> test -> test -> test -> test -> catch -> main -> console.error -> process.exit","./lib/csharp-analysis.mjs; ./lib/python-analysis.mjs; node:fs/promises; node:path; prettier; prettier/plugins/babel","Globals{write=[workspaceRoot, csvOverride, csvPath, SUPPORTED_EXTENSIONS, ADOBE_IDENTIFIERS, ADOBE_INPUT_PROPERTIES, DOM_READ_METHODS, DOM_WRITE_METHODS]; read=[resolveCsvPath, parseCsv, Error, error, analyzeCssIO, analyzeJsonIO, analyzeHtmlIO, buildSummary, analyzeScriptIO, quoteForCsv, sanitizeForParsing, createIoContext, traverseAst, analyzeNode, handleCallExpression, handleMemberExpression, handleAssignmentExpression, getCalleeChain, extractLiteralValue, isFsReadCall, isFsWriteCall, getMemberChain, type, extractJsonKeys, getPropertyName]} | SharedState{import:node:fs/promises, import:node:path, import:prettier, import:prettier/plugins/babel, import:./lib/csharp-analysis.mjs, import:./lib/python-analysis.mjs}","860","Inputs{FILE:fs.readFile()} | Outputs{COMPONENT:return; FILE:fs.writeFile(); LOG:console.error; LOG:console.log; LOG:console.warn}","SideEffects{FILE:read; FILE:write; LOG:console}","155 (Very High)","mixed (async+await+promises+callbacks) [6% async]","good (4×try/catch, 1×.catch(), 1×callbacks) [LOW]"
"Source","Tools","CSVTools","updateLinesOfCodeCounter.mjs","","","","","","",".mjs file","UpdateLinesOfCodeCounter ΓÇö Defines countLinesOfCode, findRootRow, mainΓÇª | Notes: CSV PROJECT MAP - LINES OF CODE COUNTER [File IO, Stateful]","","","countLinesOfCode; findRootRow; main; parseCsv; quoteForCsv; resolveCsvPath","process.cwd -> resolveCsvPath -> console.log -> console.log -> console.log -> fs.readFile -> parseCsv -> new Error -> table.0.map -> trim -> value.replace -> headers.findIndex -> header.toUpperCase -> new Error -> headers.findIndex -> header.toUpperCase -> console.log -> headers.findIndex -> toUpperCase -> header.trim -> headers.splice -> row.push -> row.splice -> console.log -> toLowerCase -> trim -> typeValue.endsWith -> trim -> pathSegments.push -> pathSegments.reduce -> path.join -> path.join -> fs.readFile -> console.warn -> countLinesOfCode -> String -> trim -> replace -> updatedEntries.push -> findRootRow -> trim -> replace -> String -> console.log -> console.log -> table.map -> cells.push -> quoteForCsv -> cells.join -> normalizedRows.join -> fs.writeFile -> console.log -> updatedEntries.forEach -> console.log -> console.log -> toLowerCase -> trim -> trim -> pathSegments.push -> source.split -> line.trim -> String -> stringValue.replace -> currentRow.push -> currentRow.push -> records.push -> currentRow.push -> records.push -> currentRow.push -> records.push -> path.isAbsolute -> path.join -> path.join -> catch -> main -> console.error -> process.exit","node:fs/promises; node:path","Globals{write=[workspaceRoot, csvOverride, csvPath]; read=[resolveCsvPath, parseCsv, Error, error, countLinesOfCode, findRootRow, quoteForCsv]} | SharedState{import:node:fs/promises, import:node:path}","307","Inputs{FILE:fs.readFile()} | Outputs{COMPONENT:return; FILE:fs.writeFile(); LOG:console.error; LOG:console.log; LOG:console.warn}","SideEffects{FILE:read; FILE:write; LOG:console}","46 (Complex)","mixed (async+await+promises+callbacks) [7% async]","basic (1×try/catch, 1×.catch(), 1×callbacks) [MEDIUM]"
"Source","Tools","CSVTools","updateOrderOfOperations.mjs","","","","","","",".mjs file","UpdateOrderOfOperations ΓÇö Defines extractOrderOfOperations, isSupportedScriptType, mainΓÇª | Notes: CSV PROJECT MAP - ORDER OF OPERATIONS EXTRACTION SCRIPT [File IO, Stateful]","","","extractOrderOfOperations; isSupportedScriptType; main; parseCsv; quoteForCsv; resolveCsvPath; sanitizeForParsing; stringifyCallee; stringifyProperty; traverseAst","process.cwd -> resolveCsvPath -> console.log -> console.log -> console.log -> fs.readFile -> parseCsv -> new Error -> table.0.map -> trim -> value.replace -> headers.findIndex -> header.toUpperCase -> new Error -> headers.findIndex -> header.toUpperCase -> console.log -> headers.findIndex -> toUpperCase -> header.trim -> headers.splice -> row.push -> row.splice -> console.log -> toLowerCase -> trim -> isSupportedScriptType -> trim -> pathSegments.push -> pathSegments.reduce -> path.join -> path.join -> toLowerCase -> path.extname -> fs.readFile -> console.warn -> trim -> replace -> updatedEntries.push -> extractCSharpCallOrder -> extractPythonCallOrder -> console.warn -> sanitizeForParsing -> extractOrderOfOperations -> operations.join -> updatedEntries.push -> console.log -> table.map -> cells.push -> quoteForCsv -> cells.join -> normalizedRows.join -> fs.writeFile -> console.log -> updatedEntries.forEach -> join -> entry.order.slice -> entry.order.join -> console.log -> prettier.__debug.parse -> console.warn -> traverseAst -> stringifyCallee -> operations.push -> stringifyCallee -> operations.push -> stringifyCallee -> stringifyProperty -> stringifyCallee -> stringifyProperty -> String -> visitor -> Object.keys -> Array.isArray -> traverseAst -> traverseAst -> String -> stringValue.replace -> currentRow.push -> currentRow.push -> records.push -> currentRow.push -> records.push -> currentRow.push -> records.push -> path.isAbsolute -> path.join -> path.join -> typeValue.endsWith -> supported.some -> typeValue.endsWith -> source.replace -> catch -> main -> console.error -> process.exit","./lib/csharp-analysis.mjs; ./lib/python-analysis.mjs; node:fs/promises; node:path; prettier; prettier/plugins/babel","Globals{write=[workspaceRoot, csvOverride, csvPath]; read=[resolveCsvPath, parseCsv, Error, isSupportedScriptType, error, sanitizeForParsing, extractOrderOfOperations, quoteForCsv, traverseAst, stringifyCallee, stringifyProperty]} | SharedState{import:node:fs/promises, import:node:path, import:prettier, import:prettier/plugins/babel, import:./lib/csharp-analysis.mjs, import:./lib/python-analysis.mjs}","464","Inputs{FILE:fs.readFile()} | Outputs{COMPONENT:return; FILE:fs.writeFile(); LOG:console.error; LOG:console.log; LOG:console.warn}","SideEffects{FILE:read; FILE:write; LOG:console}","81 (Very High)","mixed (async+await+promises+callbacks) [10% async]","good (3×try/catch, 1×.catch(), 1×callbacks) [LOW]"
"Source","Tools","CSVTools","updateSideEffects.mjs","","","","","","",".mjs file","UpdateSideEffects ΓÇö Defines buildSummary, getCalleeChain, getMemberChainΓÇª | Notes: CSV PROJECT MAP - SIDE EFFECTS EXTRACTION SCRIPT [File IO, Stateful]","","","buildSummary; getCalleeChain; getMemberChain; getPropertyName; handleAssignmentExpression; handleCallExpression; handleNewExpression; handleUpdateExpression; isFsReadCall; isFsWriteCall; isNetworkCall; isSupportedScriptType; main; parseCsv; processEntry; quoteForCsv; resolveCsvPath; sanitizeForParsing; summarizeSideEffects; traverseAst","process.cwd -> resolveCsvPath -> new Set -> new Set -> new Set -> new Set -> new Set -> new Set -> console.log -> console.log -> console.log -> fs.readFile -> parseCsv -> new Error -> table.0.map -> trim -> value.replace -> headers.findIndex -> header.toUpperCase -> new Error -> headers.findIndex -> header.toUpperCase -> console.log -> headers.findIndex -> toUpperCase -> header.trim -> headers.splice -> row.push -> row.splice -> console.log -> toLowerCase -> trim -> isSupportedScriptType -> trim -> pathSegments.push -> pathSegments.reduce -> path.join -> path.join -> toLowerCase -> path.extname -> fs.readFile -> console.warn -> trim -> replace -> summarizeSideEffects -> updatedEntries.push -> console.log -> table.map -> cells.push -> quoteForCsv -> cells.join -> normalizedRows.join -> fs.writeFile -> console.log -> updatedEntries.forEach -> console.log -> new Set -> test -> categories.add -> test -> categories.add -> buildSummary -> analyzeCSharpIO -> new Set -> entry.split -> value.includes -> categories.add -> categories.add -> categories.add -> categories.add -> categories.add -> categories.add -> categories.add -> categories.add -> categories.add -> inputs.forEach -> outputs.forEach -> summarizeCSharpDataFlow -> dataFlow.includes -> categories.add -> buildSummary -> summarizePythonSideEffects -> console.warn -> SUPPORTED_EXTENSIONS.has -> sanitizeForParsing -> prettier.__debug.parse -> console.warn -> new Set -> traverseAst -> handleCallExpression -> handleNewExpression -> handleAssignmentExpression -> handleUpdateExpression -> buildSummary -> getCalleeChain -> chain.join -> isFsReadCall -> categories.add -> isFsWriteCall -> categories.add -> isNetworkCall -> categories.add -> categories.add -> categories.add -> categories.add -> includes -> categories.add -> DOM_WRITE_METHODS.has -> categories.add -> DOM_READ_METHODS.has -> categories.add -> includes -> categories.add -> chain.includes -> categories.add -> chain.includes -> chain.includes -> categories.add -> TIMER_FUNCTIONS.has -> categories.add -> RANDOM_FUNCTIONS.has -> TIME_FUNCTIONS.has -> categories.add -> getMemberChain -> categories.add -> categories.add -> categories.add -> categories.add -> categories.add -> categories.add -> categories.add -> categories.add -> getMemberChain -> categories.add -> categories.add -> categories.add -> categories.add -> typeValue.endsWith -> supported.some -> typeValue.endsWith -> sort -> Array.from -> items.join -> getCalleeChain -> getPropertyName -> getCalleeChain -> getMemberChain -> getPropertyName -> String -> name.endsWith -> name.endsWith -> name.endsWith -> name.endsWith -> name.endsWith -> name.endsWith -> name.endsWith -> name.endsWith -> name.startsWith -> name.startsWith -> name.startsWith -> name.startsWith -> name.startsWith -> visitor -> Object.keys -> Array.isArray -> traverseAst -> traverseAst -> source.replace -> currentRow.push -> currentRow.push -> records.push -> currentRow.push -> records.push -> currentRow.push -> records.push -> String -> stringValue.replace -> path.isAbsolute -> path.join -> path.join -> catch -> main -> console.error -> console.error -> process.exit","./lib/csharp-analysis.mjs; ./lib/python-analysis.mjs; node:fs/promises; node:path; prettier; prettier/plugins/babel","Globals{write=[workspaceRoot, csvOverride, csvPath, SUPPORTED_EXTENSIONS, DOM_WRITE_METHODS, DOM_READ_METHODS, TIMER_FUNCTIONS, RANDOM_FUNCTIONS, TIME_FUNCTIONS]; read=[resolveCsvPath, parseCsv, Error, isSupportedScriptType, error, summarizeSideEffects, quoteForCsv, buildSummary, sanitizeForParsing, traverseAst, handleCallExpression, handleNewExpression, handleAssignmentExpression, handleUpdateExpression, getCalleeChain, isFsReadCall, isFsWriteCall, isNetworkCall, getMemberChain, getPropertyName]} | SharedState{import:node:fs/promises, import:node:path, import:prettier, import:prettier/plugins/babel, import:./lib/csharp-analysis.mjs, import:./lib/python-analysis.mjs}","888","Inputs{FILE:fs.readFile()} | Outputs{COMPONENT:return; FILE:fs.writeFile(); LOG:console.error; LOG:console.log; LOG:console.warn}","SideEffects{FILE:read; FILE:write; LOG:console}","175 (Very High)","mixed (async+await+promises+callbacks) [7% async]","good (3×try/catch, 1×.catch(), 1×callbacks) [LOW]"
"Source","Tools","CSVTools","updateTestCoverage.mjs","","","","","","",".mjs file","UpdateTestCoverage ΓÇö Defines buildRelativePath, classifyCoverage, fileExistsΓÇª | Notes: CSV PROJECT MAP - TEST COVERAGE EXTRACTION WORKFLOW [File IO, Stateful]","","","buildRelativePath; classifyCoverage; fileExists; flush; formatCoverage; main; normalizePath; parseLcov; resolveCoverageDir; resolveCoveragePath; resolveTestWorkspace; runNativeCoverage","process.cwd -> resolveCoverageDir -> path.join -> resolveTestWorkspace -> filter -> process.env.TEST_COVERAGE_ARGS.split -> console.log -> console.log -> console.log -> runNativeCoverage -> fileExists -> new Error -> console.log -> parseLcov -> console.log -> console.log -> loadCsvTable -> headers.findIndex -> toUpperCase -> header.trim -> new Error -> ensureColumn -> console.log -> rows.forEach -> toLowerCase -> trim -> typeValue.endsWith -> buildRelativePath -> normalizePath -> coverageMap.get -> formatCoverage -> trim -> console.log -> console.log -> console.log -> console.log -> writeCsvTable -> resolveCsvPath -> console.log -> console.log -> fs.rm -> new Promise -> npmArgs.push -> spawn -> child.on -> resolve -> reject -> new Error -> child.on -> reject -> new Error -> console.log -> fs.readFile -> text.split -> new Map -> path.isAbsolute -> path.join -> normalizePath -> path.relative -> resolveCoveragePath -> normalized.startsWith -> Number -> toFixed -> coverage.set -> lines.forEach -> line.startsWith -> flush -> trim -> line.slice -> line.startsWith -> split -> line.slice -> Number -> line.startsWith -> flush -> flush -> trim -> segments.push -> segments.join -> join -> input.split -> classifyCoverage -> metrics.pct.toFixed -> fs.access -> path.isAbsolute -> path.join -> path.join -> path.isAbsolute -> path.join -> path.join -> catch -> main -> console.error -> process.exit","./lib/table-helpers.mjs; node:child_process; node:fs/promises; node:path","Globals{write=[workspaceRoot, coverageDir, coverageFile, testWorkspace, SKIP_TEST_RUN, COVERAGE_ARGS]; read=[resolveCoverageDir, resolveTestWorkspace, runNativeCoverage, fileExists, Error, parseLcov, buildRelativePath, normalizePath, formatCoverage, classifyCoverage]} | SharedState{import:node:fs/promises, import:node:path, import:node:child_process, import:./lib/table-helpers.mjs}","371","Inputs{CONFIG:process.env; FILE:fs.readFile()} | Outputs{COMPONENT:return; LOG:console.error; LOG:console.log}","SideEffects{CONFIG:process.env; FILE:read; LOG:console}","35 (Complex)","mixed (async+await+promises+callbacks) [21% async]","basic (1×try/catch, 1×.catch(), 2×callbacks) [MEDIUM]"
